---
  - include: gather_internal_ips.yaml

  - name: gathering nova.conf settings
    shell: grep -Ev '^$|^#' {{ item.file }} | grep -m1 {{ item.setting }}
    loop: '{{ nova_settings }}'
    register: gather_result
    ignore_errors: true

  - name: Update memcache results
    set_fact:
      nova_results: "{{nova_results + [item.stdout|regex_replace(' ','')]}}"
    loop: "{{gather_result.results}}"
    when: item.stdout is defined

  - name: check nova containers are running
    shell:  podman inspect `podman ps|grep -i "{{ item }}" | awk '{print $1}'` | grep container_name -m1
    loop: "{{ nova_containers_train }}"
    register: gather_container_result
    ignore_errors: true

  - name: Save nova container results
    set_fact:
      nova_results: "{{nova_results + [item.stdout| regex_replace(' ','')] }}"
    loop: "{{gather_container_result.results}}"

  - name: Remove special char (nova_settings train)
    set_fact:
      nova_results: "{{nova_results | map('regex_replace', '(\\[|\\]|\\\"|\\\\)','') | list }}"

  - name: Update memcache results
    set_fact:
      nova_results: "{{nova_results + [item| regex_replace('^.*=(.*)$','\\1')]}}"
    loop: "{{nova_results}}"
    when: "'servers' in item"

  - name: Split internal ip address into a list
    set_fact:
      nova_results: "{{(nova_results + item.split(',')) | reject('search', item) | list}}"
    loop: "{{nova_results | select() | list}}"
    when: item != '' and item[0] | int == 1

  - name: Removing white spaces
    set_fact:
      results: "{{(nova_check +  nova_train + memcache_server) | regex_replace(' ','')}}"
  
  - name: Remove trailing chars (nova_settings train)
    set_fact:
      nova_results: "{{nova_results | map('replace', ',' ,'') | list}}"
  
  - name: Validating nova settings
    set_fact:
      expected_results: "{{results | difference(nova_results)}}"
  
  - name: Validating nova settings
    set_fact:
      actual_results: "{{nova_results | difference(results)}}"

  - name: Combine controller nova results to a dictionary (train)
    set_fact:
      nova_settings_results: "{{ nova_settings_results | default({}) | combine({inventory_hostname:{'expected': expected_results, 'actual': actual_results }}) }}"

  - include: common/save_results.yaml
    vars:
      expected: "{{expected_results}}"
      actual: "{{actual_results}}"
      heading: nova
    ignore_errors: yes
    connection: local
    become: no
    when: expected_results | length > 0 or actual_results | length > 0
