#!/usr/bin/env python3
import argparse
from base64 import b64decode,b64encode
import binascii
import getpass
import os
import re
import requests
import urllib3
urllib3.disable_warnings()
import openstack

def print_openstack_details(volume_details="",openstack_vol_id=""):
    # read OS_* variables from overcloudrc file
    # and set them in the script's environment
    with open("/home/stack/overcloudrc") as rc_file:
        for line in rc_file.readlines():
            if re.match("^export OS",line):
                os_envvar,val = line.strip('\n').replace("export ","").split("=")
                os.environ[os_envvar] = val
    conn = openstack.connect(load_envvars=True)
    volume = conn.get_volume_by_id(openstack_vol_id)
    project = conn.get_project(volume.location.project.id)
    print(f'PowerFlex Volume ID: {volume_details["id"]} Volume Name: {volume_details["name"]} is OpenStack Volume ID {openstack_id}')
    print(f"OpenStack Volume ID: {volume.id} is {volume.name} in Project: {project.name}")

def powerflex_login(user="admin",password="",powerflex_ip="") -> str:
    login_response = requests.get(f"https://{powerflex_ip}/api/login",auth=(user,password),verify=False)
    login_response.raise_for_status()
    return login_response.text.strip('"')

def powerflex_logout(user="admin",token="",powerflex_ip="") -> None:
    if token:
        login_response = requests.get(f"https://{powerflex_ip}/api/logout",auth=(user,token),verify=False)
        login_response.raise_for_status()

def powerflex_id_to_openstack(volume_name="") -> str:
        # PowerFlex volumes names are generated by the PowerFlex Cinder driver by
        # removing the dashes from the OpenStack volume id, converting that string to binary and
        # then base64 encoding the result.
        # The lines below reverse that process to recover the OpenStack volume id.
        v = binascii.b2a_hex(b64decode(volume_name)).decode('utf-8')
        return f"{v[0:8]}-{v[8:12]}-{v[12:16]}-{v[16:20]}-{v[20:32]}"

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Gets the OpenStack details for a PowerFlex Volume ID.",add_help=True)
    parser.add_argument("--ip",action="store",metavar="<PowerFlex IP Address>",required=True)
    parser.add_argument("--volid",action="store",metavar="<PowerFlex Volume ID>",required=True)
    args = parser.parse_args()

    password = getpass.getpass("Enter the password for the PowerFlex: ")
    print()
    token = ""
    try:
        token = powerflex_login(password=password,powerflex_ip=args.ip)
        getvol_response = requests.get(f"https://{args.ip}/api/instances/Volume::{args.volid}",auth=("admin",token),verify=False)
        getvol_response.raise_for_status()
        vol_details = getvol_response.json()
        openstack_id = powerflex_id_to_openstack(vol_details["name"])
        print_openstack_details(vol_details,openstack_id)

    except requests.exceptions.ConnectionError as c:
        print(c)
        print("Check that the PowerFlex IP address is correct")
    except requests.exceptions.HTTPError as h:
        print(f"There was an error communicating with the Powerflex {args.ip}.\nError {h}\n")
        status = h.response.status_code
        if status >=400 and status <500:
            print("Unauthorized - please check the password you have entered")
        if status >= 500:
            print("There is a problem with the PowerFlex") 
    except binascii.Error:
        print(f'{vol_details["name"]} is not an OpenStack volume')
    finally:
        powerflex_logout(token=token,powerflex_ip=args.ip)
